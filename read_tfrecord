import tensorflow as tf 
def read_and_decode(filename_queue):
  reader = tf.TFRecordReader()
  _, serialized_example = reader.read(filename_queue)
  features = tf.parse_single_example(
      serialized_example,
      # Defaults are not specified since both keys are required.
      features={
          'image_raw': tf.FixedLenFeature([], tf.string),  #image_raw is varify lens
          'label': tf.FixedLenFeature([], tf.string),
      })

  # Convert from a scalar string tensor (whose single string has
  # length mnist.IMAGE_PIXELS) to a uint8 tensor with shape
  # [mnist.IMAGE_PIXELS].
  image = tf.decode_raw(features['image_raw'], tf.uint8)
  # label = tf.decode_base64(features['label'])
  # label = tf.decode_raw(features['label'], tf.uint8)
  # print(image)

  # OPTIONAL: Could reshape into a 28x28 image and apply distortions
  # here.  Since we are not applying any distortions in this
  # example, and the next step expects the image to be flattened
  # into a vector, we don't bother.

  # Convert from [0, 255] -> [-0.5, 0.5] floats.
  image = tf.cast(image, tf.float32) * (1. / 255) - 0.5

  # Convert label from a scalar uint8 tensor to an int32 scalar.
  label = tf.cast(features['label'], tf.int32)

  return image, label

def main(_):
  filename = "D:\\kaggle_plane\\train.tfrecords"
  filename_queue = tf.train.string_input_producer([filename], num_epochs=1)
  img,lab = read_and_decode(filename_queue)
  # img = preprocessing(img)
  # img,lab = tf.train.batch([img,label]......)

  with tf.Session() as sess:
    sess.run([tf.global_variables_initializer(),tf.local_variables_initializer()])
    coord = tf.train.Coordinator()
    threads = tf.train.start_queue_runners(sess=sess, coord=coord)
    try:
      s = 10
      j=0
      while not coord.should_stop():
        i,l = sess.run([img,lab])
        if j < s:
          print(sess.run([tf.shape(i),tf.shape(l)]))
          j+=1
        else:
          break
    except tf.errors.OutOfRangeError:
      print("Done")
    finally:
      coord.request_stop()
    coord.join(threads)

if __name__ == "__main__":
  tf.app.run()
